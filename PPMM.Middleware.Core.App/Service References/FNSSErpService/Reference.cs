//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PPMM.Middleware.Core.App.FNSSErpService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FNSSErpService.IFnssErpService")]
    public interface IFnssErpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFnssErpService/PushShiftState", ReplyAction="http://tempuri.org/IFnssErpService/PushShiftStateResponse")]
        bool PushShiftState(string shiftId, PPMM.Data.Model.Enumerations.ShiftStateType stateType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFnssErpService/PushShiftState", ReplyAction="http://tempuri.org/IFnssErpService/PushShiftStateResponse")]
        System.Threading.Tasks.Task<bool> PushShiftStateAsync(string shiftId, PPMM.Data.Model.Enumerations.ShiftStateType stateType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFnssErpService/GetWaitingWorkOrders", ReplyAction="http://tempuri.org/IFnssErpService/GetWaitingWorkOrdersResponse")]
        PPMM.Data.Model.Entities.WorkOrder[] GetWaitingWorkOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFnssErpService/GetWaitingWorkOrders", ReplyAction="http://tempuri.org/IFnssErpService/GetWaitingWorkOrdersResponse")]
        System.Threading.Tasks.Task<PPMM.Data.Model.Entities.WorkOrder[]> GetWaitingWorkOrdersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFnssErpServiceChannel : PPMM.Middleware.Core.App.FNSSErpService.IFnssErpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FnssErpServiceClient : System.ServiceModel.ClientBase<PPMM.Middleware.Core.App.FNSSErpService.IFnssErpService>, PPMM.Middleware.Core.App.FNSSErpService.IFnssErpService {
        
        public FnssErpServiceClient() {
        }
        
        public FnssErpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FnssErpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FnssErpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FnssErpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool PushShiftState(string shiftId, PPMM.Data.Model.Enumerations.ShiftStateType stateType) {
            return base.Channel.PushShiftState(shiftId, stateType);
        }
        
        public System.Threading.Tasks.Task<bool> PushShiftStateAsync(string shiftId, PPMM.Data.Model.Enumerations.ShiftStateType stateType) {
            return base.Channel.PushShiftStateAsync(shiftId, stateType);
        }
        
        public PPMM.Data.Model.Entities.WorkOrder[] GetWaitingWorkOrders() {
            return base.Channel.GetWaitingWorkOrders();
        }
        
        public System.Threading.Tasks.Task<PPMM.Data.Model.Entities.WorkOrder[]> GetWaitingWorkOrdersAsync() {
            return base.Channel.GetWaitingWorkOrdersAsync();
        }
    }
}
